import numpy as np
import matplotlib.pyplot as plt
from tkinter import filedialog, Tk, Button, Label, Entry, Toplevel
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk


# Function to read signal from text file
def read_signal_from_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    N = int(lines[0])  # Number of samples
    signal = []
    for line in lines[1:N + 1]:
        index, value = map(float, line.split())
        signal.append((index, value))
    return np.array(signal)


# Function to add two signals
def add_signals(signal1, signal2):
    indices = signal1[:, 0]
    values = signal1[:, 1] + signal2[:, 1]
    return np.column_stack((indices, values))


# Function to subtract two signals (signal1 - signal2)
def subtract_signals(signal1, signal2):
    return add_signals(signal1, multiply_signal(signal2, -1))


# Function to multiply signal by a constant
def multiply_signal(signal, constant):
    return np.column_stack((signal[:, 0], signal[:, 1] * constant))


# Function to delay or advance a signal by k steps
def shift_signal(signal, k):
    indices = signal[:, 0] - k
    return np.column_stack((indices, signal[:, 1]))


# Function to fold/reverse a signal
def fold_signal(signal):
    indices = -signal[:, 0]
    return np.column_stack((indices, signal[:, 1]))


# Function to plot the signal in a new window
def plot_signal_in_new_window(signal, title="Signal"):
    new_window = Toplevel()  # Create a new window for the plot
    new_window.title(title)

    # Create a figure and axes
    fig, ax = plt.subplots(figsize=(5, 4))

    # Plot the signal
    indices = signal[:, 0]
    values = signal[:, 1]
    ax.plot(indices, values, marker='o')
    ax.set_title(title)
    ax.set_xlabel('Sample Index')
    ax.set_ylabel('Amplitude')
    ax.grid(True)

    # Create a canvas for the figure
    canvas = FigureCanvasTkAgg(fig, master=new_window)
    canvas.draw()
    canvas.get_tk_widget().pack()

    # Add the toolbar for interactivity (zooming, panning, etc.)
    toolbar = NavigationToolbar2Tk(canvas, new_window)
    toolbar.update()
    canvas.get_tk_widget().pack()


# GUI Setup
class DSPApp:
    def __init__(self, root):
        self.root = root
        self.root.title("DSP Signal Processor")

        self.label = Label(root, text="Digital Signal Processing Tasks", font=("Helvetica", 16))
        self.label.pack(pady=10)

        self.upload_button = Button(root, text="Upload Signal File", command=self.upload_file)
        self.upload_button.pack(pady=10)

        self.add_button = Button(root, text="Add Signal", command=self.add_signals_gui, state=tk.DISABLED)
        self.add_button.pack(pady=10)

        self.subtract_button = Button(root, text="Subtract Signal", command=self.subtract_signals_gui,
                                      state=tk.DISABLED)
        self.subtract_button.pack(pady=10)

        self.multiply_button = Button(root, text="Multiply Signal by Constant", command=self.multiply_signal_gui,
                                      state=tk.DISABLED)
        self.multiply_button.pack(pady=10)

        self.shift_button = Button(root, text="Shift Signal (Delay/Advance)", command=self.shift_signal_gui,
                                   state=tk.DISABLED)
        self.shift_button.pack(pady=10)

        self.fold_button = Button(root, text="Fold/Reverse Signal", command=self.fold_signal_gui, state=tk.DISABLED)
        self.fold_button.pack(pady=10)

        self.signal = None

    def upload_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.signal = read_signal_from_file(file_path)
            plot_signal_in_new_window(self.signal, title="Uploaded Signal")
            self.enable_buttons()

    def enable_buttons(self):
        self.add_button.config(state=tk.NORMAL)
        self.subtract_button.config(state=tk.NORMAL)
        self.multiply_button.config(state=tk.NORMAL)
        self.shift_button.config(state=tk.NORMAL)
        self.fold_button.config(state=tk.NORMAL)

    def add_signals_gui(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            second_signal = read_signal_from_file(file_path)
            result_signal = add_signals(self.signal, second_signal)
            plot_signal_in_new_window(result_signal, title="Added Signal")

    def subtract_signals_gui(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            second_signal = read_signal_from_file(file_path)
            result_signal = subtract_signals(self.signal, second_signal)
            plot_signal_in_new_window(result_signal, title="Subtracted Signal")

    def multiply_signal_gui(self):
        top = Toplevel(self.root)
        top.title("Multiply Signal")

        label = Label(top, text="Enter Constant Value:")
        label.pack(pady=5)

        constant_entry = Entry(top)
        constant_entry.pack(pady=5)

        def apply_multiply():
            constant = float(constant_entry.get())
            result_signal = multiply_signal(self.signal, constant)
            plot_signal_in_new_window(result_signal, title=f"Signal Multiplied by {constant}")
            top.destroy()

        apply_button = Button(top, text="Apply", command=apply_multiply)
        apply_button.pack(pady=5)

    def shift_signal_gui(self):
        top = Toplevel(self.root)
        top.title("Shift Signal")

        label = Label(top, text="Enter Shift Value (k steps):")
        label.pack(pady=5)

        shift_entry = Entry(top)
        shift_entry.pack(pady=5)

        def apply_shift():
            k = int(shift_entry.get())
            result_signal = shift_signal(self.signal, k)
            plot_signal_in_new_window(result_signal, title=f"Signal Shifted by {k} Steps")
            top.destroy()

        apply_button = Button(top, text="Apply", command=apply_shift)
        apply_button.pack(pady=5)

    def fold_signal_gui(self):
        result_signal = fold_signal(self.signal)
        plot_signal_in_new_window(result_signal, title="Folded/Reversed Signal")


# Main execution
if __name__ == "__main__":
    root = Tk()
    app = DSPApp(root)
    root.mainloop()
